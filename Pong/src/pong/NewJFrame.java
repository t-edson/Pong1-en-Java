package pong;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author Usuario
 */
public class NewJFrame extends javax.swing.JFrame {

    private int pixSize = 15;
    private int X_MAX = 30;
    private int Y_MAX = 19;
    private int y1 = 5, y2 = 5;
    private int xball = 10, yball = 10;
    private int incX = 1, incY = 1;
    private int punt1 = 0, punt2 = 0;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        Timer timer = new Timer (100, new ActionListener () { 
            public void actionPerformed(ActionEvent e) { 
                xball = xball + incX;
                yball = yball + incY;
                //Verifica si choca con paletas
                if (xball == 2 && yball >= y1 && yball < y1+3 ) {
                    incX = 1;
                    return; 
                }
                if (xball == X_MAX-2 && yball >= y2 && yball < y2+3 ) {
                    incX = -1;
                    return; 
                }
                //Rebote de bordes
                if (xball<1) {
                    incX = 1;
                    punt2++;
                }
                if (xball>X_MAX-1) {
                    incX = -1;
                    punt1++;
                }
                if (yball<1) {
                    incY = 1;
                }
                if (yball>Y_MAX-1) {
                    incY = -1;
                }
                //Dibuja en pantalla
                repaint();
             } 
        }); 
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pong");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 471, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 305, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        //this.getContentPane().setBackground(Color.red);
    }//GEN-LAST:event_formWindowActivated

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        char c = evt.getKeyChar();
        //Control de jugador 1
        if (c == 'a') y1--;
        if (c == 'z') y1++;
        if (y1<0) y1 = 0;
        if (y1>Y_MAX-2) y1 = Y_MAX-2;
        //Control de jugador 2
        if (c == 'k') y2--;
        if (c == 'm') y2++;
        if (y2<0) y2 = 0;
        if (y2>Y_MAX-2) y2 = Y_MAX-2;
        this.repaint();
    }//GEN-LAST:event_formKeyPressed
    @Override
    public void paint(Graphics g) {
        g.fillRect(0, 0, 500, 500);
        //Dibuja jugador 1
        draw(g, 1, y1);
        draw(g, 1, y1+1);
        draw(g, 1, y1+2);
        //Dibuja jugador 2
        draw(g, X_MAX-1, y2);
        draw(g, X_MAX-1, y2+1);
        draw(g, X_MAX-1, y2+2);
        //Dibuja bola
        draw(g, xball, yball);
        //Dibuja puntaje
        drawNumber(g, 9, 1, punt1);
        drawNumber(g, 18, 1, punt2);
        //Dibuja línea vertical
        for (int i=0; i<Y_MAX; i++) 
            if (i % 2 == 0) draw(g, X_MAX / 2, i);
    }
    /* Dibuja un pixel en pantalla, en la coordenada especificada. */
    public void draw(Graphics g, int x, int y) {
        g.setColor(Color.white);
        g.fillRect(x*pixSize+10, y*pixSize + 30, pixSize, pixSize);
    }
    /* Dibuja un número en pantalla en la posición indicada. Solo reconoce
    números del 0 al 9.*/
    public void drawNumber(Graphics g, int x, int y, int n) {
        g.setColor(Color.white);
        switch (n) {
            case 0: 
                draw(g, x+1, y);
                draw(g, x+2, y);
                draw(g, x+0, y+1);
                draw(g, x+3, y+1);
                draw(g, x+0, y+2);
                draw(g, x+3, y+2);
                draw(g, x+0, y+3);
                draw(g, x+3, y+3);
                draw(g, x+1, y+4);
                draw(g, x+2, y+4);
                break;
            case 1: 
                draw(g, x+2, y);
                draw(g, x+2, y+1);
                draw(g, x+2, y+2);
                draw(g, x+2, y+3);
                draw(g, x+2, y+4);
                break;
            case 2: 
                draw(g, x+0, y);
                draw(g, x+1, y);
                draw(g, x+2, y);

                draw(g, x+3, y+1);
                
                draw(g, x+1, y+2);
                draw(g, x+2, y+2);
                
                draw(g, x+0, y+3);

                draw(g, x+1, y+4);
                draw(g, x+2, y+4);
                draw(g, x+3, y+4);
                break;
            case 3: 
                draw(g, x+0, y);
                draw(g, x+1, y);
                draw(g, x+2, y);

                draw(g, x+3, y+1);
                
                draw(g, x+1, y+2);
                draw(g, x+2, y+2);
                
                draw(g, x+3, y+3);

                draw(g, x+0, y+4);
                draw(g, x+1, y+4);
                draw(g, x+2, y+4);
                break;
            case 4: 
                draw(g, x+0, y);
                draw(g, x+3, y);

                draw(g, x+0, y+1);
                draw(g, x+3, y+1);
                
                draw(g, x+0, y+2);
                draw(g, x+1, y+2);
                draw(g, x+2, y+2);
                draw(g, x+3, y+2);
                
                draw(g, x+3, y+3);

                draw(g, x+3, y+4);
                break;
            case 5:
                draw(g, x+0, y);
                draw(g, x+1, y);
                draw(g, x+2, y);
                draw(g, x+3, y);

                draw(g, x+0, y+1);
                
                draw(g, x+0, y+2);
                draw(g, x+1, y+2);
                draw(g, x+2, y+2);
                draw(g, x+3, y+2);
                
                draw(g, x+3, y+3);

                draw(g, x+0, y+4);
                draw(g, x+1, y+4);
                draw(g, x+2, y+4);
                draw(g, x+3, y+4);
                break;
            case 6:
                draw(g, x+0, y);
                draw(g, x+1, y);
                draw(g, x+2, y);
                draw(g, x+3, y);

                draw(g, x+0, y+1);
                
                draw(g, x+0, y+2);
                draw(g, x+1, y+2);
                draw(g, x+2, y+2);
                draw(g, x+3, y+2);
                
                draw(g, x+0, y+3);
                draw(g, x+3, y+3);

                draw(g, x+0, y+4);
                draw(g, x+1, y+4);
                draw(g, x+2, y+4);
                draw(g, x+3, y+4);
                break;
            case 7:
                draw(g, x+0, y);
                draw(g, x+1, y);
                draw(g, x+2, y);
                draw(g, x+3, y);

                draw(g, x+3, y+1);
                
                draw(g, x+2, y+2);
                
                draw(g, x+1, y+3);

                draw(g, x+1, y+4);
                break;
            case 8:
                draw(g, x+0, y);
                draw(g, x+1, y);
                draw(g, x+2, y);
                draw(g, x+3, y);

                draw(g, x+0, y+1);
                draw(g, x+3, y+1);
                
                draw(g, x+0, y+2);
                draw(g, x+1, y+2);
                draw(g, x+2, y+2);
                draw(g, x+3, y+2);
                
                draw(g, x+0, y+3);
                draw(g, x+3, y+3);

                draw(g, x+0, y+4);
                draw(g, x+1, y+4);
                draw(g, x+2, y+4);
                draw(g, x+3, y+4);
                break;
            case 9:
                draw(g, x+0, y);
                draw(g, x+1, y);
                draw(g, x+2, y);
                draw(g, x+3, y);

                draw(g, x+0, y+1);
                draw(g, x+3, y+1);
                
                draw(g, x+0, y+2);
                draw(g, x+1, y+2);
                draw(g, x+2, y+2);
                draw(g, x+3, y+2);
                
                draw(g, x+3, y+3);

                draw(g, x+0, y+4);
                draw(g, x+1, y+4);
                draw(g, x+2, y+4);
                draw(g, x+3, y+4);
                break;
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
